services:
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
    - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
    - cadvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
    - 8091:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
    - servergrpc

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-1:9092 #PLAINTEXT_INTERNAL://localhost:19092
      SCHEMA_REGISTRY_DEBUG: 'true'

#  kafka-broker-1:
#    image: confluentinc/cp-kafka:latest
#    hostname: kafka-broker-1
#    ports:
#      - "19092:19092"
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT_INTERNAL://localhost:19092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
 
 
  kafka-broker-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker-1
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
#      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 #,PLAINTEXT_INTERNAL://localhost:19092
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
#         test: ["CMD-SHELL", "kafka-topics.sh --list --zookeeper zookeeper:2181"]
         test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --create --topic salvatore --partitions 3"]
         interval: 60s
         timeout: 10s
         retries: 2

  kafka-broker-2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-broker-2
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9092 ,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3

  kafka-broker-3:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-broker-3
    ports:
      - "39092:39092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:9092 #,PLAINTEXT_INTERNAL://localhost:39092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3

#  producer:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    container_name: producer
#    depends_on:
#      - kafka
#      kafka-broker-1:
#        condition: service_healthy
#    environment:
#      BOOTSTRAP_SERVERS: kafka:9092
#    command: python producer.py

  mysql:
    image: mysql:8.0
    container_name: mysql_container
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: usermanagement
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 5s
#    ports:
#      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts:/docker-entrypoint-initdb.d/


  datacollector:
    image: datacollectorimage
    build:
      context: .
      dockerfile: datacollectorDockerfile
    container_name: datacollector
    depends_on:
      mysql:
         condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka:9092

  alertsystem:
    image: alertsystemimage
    build:
      context: .
      dockerfile: alertDockerfile
    container_name: alertsystemcontainer
    depends_on:
      kafka-broker-1:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
#      GROUP_ID: consumer-group-1

  alerttonotifier:
    image: alerttonofierimage
    build:
      context: .
      dockerfile: botDocker
    container_name: alerttocontainer
    depends_on:
      kafka-broker-1:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
#      GROUP_ID: consumer-group-1
#    command: python alerttonotifier.py

  servergrpc:
    image: servergrpcimage
    build:
      context: .
      dockerfile: servergRPCDockerfile
    container_name: servergRPC
    depends_on:
      mysql:
        condition: service_healthy
    restart: always
    ports:
       - "50051:50051"


volumes:
  mysql_data:



